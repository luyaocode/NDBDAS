package ${packageName}.service.impl;

import cn.dev33.satoken.stp.StpUtil;
import com.asurplus.system.vo.PageVO;
import com.asurplus.system.vo.TableInfo;
import com.asurplus.common.utils.PageUtils;
import com.asurplus.common.utils.RES;
import ${packageName}.entity.${ClassName};
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.service.${ClassName}Service;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

import java.util.Arrays;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl extends ServiceImpl<${ClassName}Mapper, ${ClassName}> implements ${ClassName}Service {

    @Override
    public TableInfo list(${ClassName} ${className}, int isExport) {
        // 获取分页对象
        PageVO pageVO = PageUtils.getPageVO();
        if (1 == isExport) {
            pageVO.setPageSize(Integer.MAX_VALUE);
        }
        // 查询条件
        QueryWrapper<${ClassName}> queryWrapper = new QueryWrapper<>();
        /**
         * TODO 自己实现查询条件
         */
        // 时间段查询
        if (StringUtils.isNotBlank(pageVO.getBeginTime())) {
            queryWrapper.lambda().ge(${ClassName}::getCreateTime, DateUtils.completionTimeStart(pageVO.getBeginTime()));
        }
        if (StringUtils.isNotBlank(pageVO.getEndTime())) {
            queryWrapper.lambda().le(${ClassName}::getCreateTime, DateUtils.completionTimeEnd(pageVO.getEndTime()));
        }
        // 排序规则
        if (StringUtils.isNotBlank(pageVO.getField())) {
            // 正序
            if (pageVO.getIsAsc()) {
                queryWrapper.orderByAsc(pageVO.getField());
            }
            // 倒序
            else {
                queryWrapper.orderByDesc(pageVO.getField());
            }
        }
        // 默认排序规则
        else {
            queryWrapper.lambda().orderByDesc(${ClassName}::getCreateTime);
        }
        return TableInfo.ok(this.baseMapper.selectPage(new Page<>(pageVO.getPageNum(), pageVO.getPageSize()), queryWrapper));
    }

    @Override
    public RES get${ClassName}(${pkColumn.javaType} ${pkColumn.javaField}) {
        return RES.ok(this.baseMapper.selectById(${pkColumn.javaField}));
    }

    @Override
    public RES add(${ClassName} ${className}) {
        if (null == ${className}) {
            return RES.no("数据错误");
        }
        /**
         * TODO 自己实现新增条件
         */
        ${className}.setCreateUser(StpUtil.getLoginIdAsInt());
        this.baseMapper.insert(${className});
        return RES.ok();
    }

    @Override
    public RES update(${ClassName} ${className}) {
        if (null == ${className} || null == ${className}.getId() || 0 == ${className}.getId()) {
            return RES.no("数据错误");
        }
        /**
         * TODO 自己实现修改条件
         */
        ${className}.setUpdateUser(StpUtil.getLoginIdAsInt());
        this.baseMapper.updateById(${className});
        return RES.ok();
    }

    @Override
    public RES delete(${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        if (null == ${pkColumn.javaField}s || 0 == ${pkColumn.javaField}s.length) {
            return RES.no("请选择需要操作的数据");
        }
        LambdaQueryWrapper<${ClassName}> queryWrapper = new LambdaQueryWrapper<>();
        queryWrapper.in(${ClassName}::getId, Arrays.asList(ids));
        this.baseMapper.delete(queryWrapper);
        return RES.ok();
    }
}
